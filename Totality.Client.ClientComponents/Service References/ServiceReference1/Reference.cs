//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Totality.Client.ClientComponents.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.ITransmitterService", CallbackContract=typeof(Totality.Client.ClientComponents.ServiceReference1.ITransmitterServiceCallback))]
    public interface ITransmitterService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransmitterService/Register", ReplyAction="http://tempuri.org/ITransmitterService/RegisterResponse")]
        bool Register(string myName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransmitterService/Register", ReplyAction="http://tempuri.org/ITransmitterService/RegisterResponse")]
        System.Threading.Tasks.Task<bool> RegisterAsync(string myName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransmitterService/AddOrders", ReplyAction="http://tempuri.org/ITransmitterService/AddOrdersResponse")]
        bool AddOrders(Totality.Model.Order[] orders);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransmitterService/AddOrders", ReplyAction="http://tempuri.org/ITransmitterService/AddOrdersResponse")]
        System.Threading.Tasks.Task<bool> AddOrdersAsync(Totality.Model.Order[] orders);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransmitterService/ShootDownNuke", ReplyAction="http://tempuri.org/ITransmitterService/ShootDownNukeResponse")]
        bool ShootDownNuke(string defender, System.Guid rocketId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransmitterService/ShootDownNuke", ReplyAction="http://tempuri.org/ITransmitterService/ShootDownNukeResponse")]
        System.Threading.Tasks.Task<bool> ShootDownNukeAsync(string defender, System.Guid rocketId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransmitterService/DipMsg", ReplyAction="http://tempuri.org/ITransmitterService/DipMsgResponse")]
        bool DipMsg(Totality.Model.Diplomatical.DipMsg msg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransmitterService/DipMsg", ReplyAction="http://tempuri.org/ITransmitterService/DipMsgResponse")]
        System.Threading.Tasks.Task<bool> DipMsgAsync(Totality.Model.Diplomatical.DipMsg msg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransmitterService/GetCountryData", ReplyAction="http://tempuri.org/ITransmitterService/GetCountryDataResponse")]
        Totality.Model.Country GetCountryData(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransmitterService/GetCountryData", ReplyAction="http://tempuri.org/ITransmitterService/GetCountryDataResponse")]
        System.Threading.Tasks.Task<Totality.Model.Country> GetCountryDataAsync(string name);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITransmitterServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITransmitterService/InitializeNukeDialog")]
        void InitializeNukeDialog();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITransmitterService/UpdateNukeDialog")]
        void UpdateNukeDialog(Totality.Model.NukeRocket[] rockets);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITransmitterService/SendNews")]
        void SendNews(Totality.Model.News[] newsList);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITransmitterService/UpdateClient")]
        void UpdateClient(Totality.Model.Country country);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITransmitterService/SendDip")]
        void SendDip(Totality.Model.Diplomatical.DipMsg msg);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITransmitterService/SendContracts")]
        void SendContracts(Totality.Model.Diplomatical.DipContract[] contracts);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITransmitterServiceChannel : Totality.Client.ClientComponents.ServiceReference1.ITransmitterService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TransmitterServiceClient : System.ServiceModel.DuplexClientBase<Totality.Client.ClientComponents.ServiceReference1.ITransmitterService>, Totality.Client.ClientComponents.ServiceReference1.ITransmitterService {
        
        public TransmitterServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public TransmitterServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public TransmitterServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public TransmitterServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public TransmitterServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public bool Register(string myName) {
            return base.Channel.Register(myName);
        }
        
        public System.Threading.Tasks.Task<bool> RegisterAsync(string myName) {
            return base.Channel.RegisterAsync(myName);
        }
        
        public bool AddOrders(Totality.Model.Order[] orders) {
            return base.Channel.AddOrders(orders);
        }
        
        public System.Threading.Tasks.Task<bool> AddOrdersAsync(Totality.Model.Order[] orders) {
            return base.Channel.AddOrdersAsync(orders);
        }
        
        public bool ShootDownNuke(string defender, System.Guid rocketId) {
            return base.Channel.ShootDownNuke(defender, rocketId);
        }
        
        public System.Threading.Tasks.Task<bool> ShootDownNukeAsync(string defender, System.Guid rocketId) {
            return base.Channel.ShootDownNukeAsync(defender, rocketId);
        }
        
        public bool DipMsg(Totality.Model.Diplomatical.DipMsg msg) {
            return base.Channel.DipMsg(msg);
        }
        
        public System.Threading.Tasks.Task<bool> DipMsgAsync(Totality.Model.Diplomatical.DipMsg msg) {
            return base.Channel.DipMsgAsync(msg);
        }
        
        public Totality.Model.Country GetCountryData(string name) {
            return base.Channel.GetCountryData(name);
        }
        
        public System.Threading.Tasks.Task<Totality.Model.Country> GetCountryDataAsync(string name) {
            return base.Channel.GetCountryDataAsync(name);
        }
    }
}
