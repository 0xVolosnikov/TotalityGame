//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Totality.Client.GUI.ReferenceToServer {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Order", Namespace="http://schemas.datacontract.org/2004/07/Totality.Model")]
    [System.SerializableAttribute()]
    public partial class Order : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DipMsg", Namespace="http://schemas.datacontract.org/2004/07/Totality.Model.Diplomatical")]
    [System.SerializableAttribute()]
    public partial class DipMsg : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="NukeRocket", Namespace="http://schemas.datacontract.org/2004/07/Totality.Model")]
    [System.SerializableAttribute()]
    public partial class NukeRocket : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ReferenceToServer.ITransmitterService", CallbackContract=typeof(Totality.Client.GUI.ReferenceToServer.ITransmitterServiceCallback))]
    public interface ITransmitterService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransmitterService/Register", ReplyAction="http://tempuri.org/ITransmitterService/RegisterResponse")]
        bool Register(string myName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransmitterService/Register", ReplyAction="http://tempuri.org/ITransmitterService/RegisterResponse")]
        System.Threading.Tasks.Task<bool> RegisterAsync(string myName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransmitterService/AddOrders", ReplyAction="http://tempuri.org/ITransmitterService/AddOrdersResponse")]
        bool AddOrders(Totality.Client.GUI.ReferenceToServer.Order[] orders);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransmitterService/AddOrders", ReplyAction="http://tempuri.org/ITransmitterService/AddOrdersResponse")]
        System.Threading.Tasks.Task<bool> AddOrdersAsync(Totality.Client.GUI.ReferenceToServer.Order[] orders);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransmitterService/ShootDownNuke", ReplyAction="http://tempuri.org/ITransmitterService/ShootDownNukeResponse")]
        bool ShootDownNuke();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransmitterService/ShootDownNuke", ReplyAction="http://tempuri.org/ITransmitterService/ShootDownNukeResponse")]
        System.Threading.Tasks.Task<bool> ShootDownNukeAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransmitterService/DipMsg", ReplyAction="http://tempuri.org/ITransmitterService/DipMsgResponse")]
        bool DipMsg(Totality.Client.GUI.ReferenceToServer.DipMsg msg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransmitterService/DipMsg", ReplyAction="http://tempuri.org/ITransmitterService/DipMsgResponse")]
        System.Threading.Tasks.Task<bool> DipMsgAsync(Totality.Client.GUI.ReferenceToServer.DipMsg msg);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITransmitterServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITransmitterService/InitializeNukeDialog")]
        void InitializeNukeDialog();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITransmitterService/UpdateNukeDialog")]
        void UpdateNukeDialog(Totality.Client.GUI.ReferenceToServer.NukeRocket[] rockets);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITransmitterService/UpdateNews")]
        void UpdateNews();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITransmitterService/SendDip")]
        void SendDip(Totality.Client.GUI.ReferenceToServer.DipMsg msg);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITransmitterServiceChannel : Totality.Client.GUI.ReferenceToServer.ITransmitterService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TransmitterServiceClient : System.ServiceModel.DuplexClientBase<Totality.Client.GUI.ReferenceToServer.ITransmitterService>, Totality.Client.GUI.ReferenceToServer.ITransmitterService {
        
        public TransmitterServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public TransmitterServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public TransmitterServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public TransmitterServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public TransmitterServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public bool Register(string myName) {
            return base.Channel.Register(myName);
        }
        
        public System.Threading.Tasks.Task<bool> RegisterAsync(string myName) {
            return base.Channel.RegisterAsync(myName);
        }
        
        public bool AddOrders(Totality.Client.GUI.ReferenceToServer.Order[] orders) {
            return base.Channel.AddOrders(orders);
        }
        
        public System.Threading.Tasks.Task<bool> AddOrdersAsync(Totality.Client.GUI.ReferenceToServer.Order[] orders) {
            return base.Channel.AddOrdersAsync(orders);
        }
        
        public bool ShootDownNuke() {
            return base.Channel.ShootDownNuke();
        }
        
        public System.Threading.Tasks.Task<bool> ShootDownNukeAsync() {
            return base.Channel.ShootDownNukeAsync();
        }
        
        public bool DipMsg(Totality.Client.GUI.ReferenceToServer.DipMsg msg) {
            return base.Channel.DipMsg(msg);
        }
        
        public System.Threading.Tasks.Task<bool> DipMsgAsync(Totality.Client.GUI.ReferenceToServer.DipMsg msg) {
            return base.Channel.DipMsgAsync(msg);
        }
    }
}
